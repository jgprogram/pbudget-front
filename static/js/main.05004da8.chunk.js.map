{"version":3,"sources":["components/RevenueRow.js","model/Revenue.js","components/Revenues.js","App.js","serviceWorker.js","index.js"],"names":["RevenueRow","props","state","revenue","this","amount","currency","account","source","description","React","Component","Revenue","id","shortid","generate","Revenues","addNewRevenue","setState","revenues","updateAmount","event","target","value","updateAccount","updateSource","updateDescription","revenueRows","map","key","className","type","onChange","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+RAsBeA,E,kDAnBX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,QAASF,EAAME,SAHJ,E,qDAQf,OACI,4BACI,4BAAKC,KAAKF,MAAMC,QAAQE,OAAxB,IAAiCD,KAAKF,MAAMC,QAAQG,UACpD,4BAAKF,KAAKF,MAAMC,QAAQI,SACxB,4BAAKH,KAAKF,MAAMC,QAAQK,QACxB,4BAAKJ,KAAKF,MAAMC,QAAQM,kB,GAdfC,IAAMC,W,gBCWhBC,EAVX,WAAYP,EAAQE,EAASC,EAAQC,GAAc,oBAC/CL,KAAKS,GAAKC,IAAQC,WAClBX,KAAKE,SAAW,MAChBF,KAAKC,OAASA,EACdD,KAAKG,QAAUA,EACfH,KAAKI,OAASA,EACdJ,KAAKK,YAAcA,GC2EZO,E,kDA/EX,WAAYf,GAAQ,IAAD,8BACf,cAAMA,IAaVgB,cAAgB,WACZ,IAAMd,EAAU,IAAIS,EAAQ,EAAKV,MAAMG,OAAQ,EAAKH,MAAMK,QAAS,EAAKL,MAAMM,OAAQ,EAAKN,MAAMO,aACjG,EAAKS,SAAS,CAACC,SAAS,GAAD,mBAAM,EAAKjB,MAAMiB,UAAjB,CAA2BhB,OAhBnC,EAmBnBiB,aAAe,SAACC,GACZ,EAAKH,SAAS,CAACb,OAAQgB,EAAMC,OAAOC,SApBrB,EAuBnBC,cAAgB,SAACH,GACb,EAAKH,SAAS,CAACX,QAASc,EAAMC,OAAOC,SAxBtB,EA2BnBE,aAAe,SAACJ,GACZ,EAAKH,SAAS,CAACV,OAAQa,EAAMC,OAAOC,SA5BrB,EA+BnBG,kBAAoB,SAACL,GACjB,EAAKH,SAAS,CAACT,YAAaY,EAAMC,OAAOC,SA9BzC,EAAKrB,MAAQ,CACTG,OAAQ,IACRE,QAAS,QACTC,OAAQ,YACRC,YAAa,SACbU,SAAU,CACN,IAAIP,EAAQ,KAAM,QAAS,aAAc,UACzC,IAAIA,EAAQ,KAAM,QAAS,MAAO,YAT3B,E,qDAoCf,IAAMe,EAAcvB,KAAKF,MAAMiB,SAASS,KAAI,SAAAzB,GAAO,OAAI,kBAAC,EAAD,CAAY0B,IAAK1B,EAAQU,GAAIV,QAASA,OAE7F,OACI,yBAAK2B,UAAU,eACX,wCACA,+BACI,+BACA,4BACI,sCACA,uCACA,sCACA,4CAEJ,4BACI,4BACI,2BAAOC,KAAK,OAAOR,MAAOnB,KAAKF,MAAMG,OAAQ2B,SAAU5B,KAAKgB,gBAEhE,4BACI,2BAAOW,KAAK,OAAOR,MAAOnB,KAAKF,MAAMK,QAASyB,SAAU5B,KAAKoB,iBAEjE,4BACI,2BAAOO,KAAK,OAAOR,MAAOnB,KAAKF,MAAMM,OAAQwB,SAAU5B,KAAKqB,gBAEhE,4BACI,2BAAOM,KAAK,OAAOR,MAAOnB,KAAKF,MAAMO,YAAauB,SAAU5B,KAAKsB,qBAErE,4BACI,4BAAQI,UAAW,YAAaG,QAAS7B,KAAKa,eAA9C,QAIR,+BACCU,IAGL,yBAAKG,UAAU,qB,GAxERpB,IAAMC,WCQduB,MARf,WACE,OACE,yBAAKJ,UAAU,OACb,kBAAC,EAAD,QCKcK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.05004da8.chunk.js","sourcesContent":["import React from 'react';\n\nclass RevenueRow extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            revenue: props.revenue\n        };\n    }\n\n    render() {\n        return (\n            <tr>\n                <td>{this.state.revenue.amount} {this.state.revenue.currency}</td>\n                <td>{this.state.revenue.account}</td>\n                <td>{this.state.revenue.source}</td>\n                <td>{this.state.revenue.description}</td>\n            </tr>\n        );\n    }\n}\n\nexport default RevenueRow;\n","import shortid from 'shortid';\n\nclass Revenue {\n    constructor(amount, account, source, description) {\n        this.id = shortid.generate();\n        this.currency = 'PLN';\n        this.amount = amount;\n        this.account = account;\n        this.source = source;\n        this.description = description;\n    }\n}\n\nexport default Revenue;\n","import React from 'react';\nimport RevenueRow from './RevenueRow';\nimport Revenue from '../model/Revenue';\n\nclass Revenues extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            amount: 2000,\n            account: 'mBank',\n            source: 'Company x',\n            description: 'Salary',\n            revenues: [\n                new Revenue(3250, 'mBank', 'Vattenfall', 'Salary'),\n                new Revenue(1200, 'mBank', 'ZUS', 'Refund')\n            ]\n        };\n    }\n\n    addNewRevenue = () => {\n        const revenue = new Revenue(this.state.amount, this.state.account, this.state.source, this.state.description);\n        this.setState({revenues: [...this.state.revenues, revenue]});\n    };\n\n    updateAmount = (event) => {\n        this.setState({amount: event.target.value});\n    };\n\n    updateAccount = (event) => {\n        this.setState({account: event.target.value});\n    };\n\n    updateSource = (event) => {\n        this.setState({source: event.target.value});\n    };\n\n    updateDescription = (event) => {\n        this.setState({description: event.target.value});\n    };\n\n    render() {\n        const revenueRows = this.state.revenues.map(revenue => <RevenueRow key={revenue.id} revenue={revenue}/>);\n\n        return (\n            <div className=\"revenue-cmp\">\n                <h3>Revenues</h3>\n                <table>\n                    <thead>\n                    <tr>\n                        <th>Amount</th>\n                        <th>Account</th>\n                        <th>Source</th>\n                        <th>Description</th>\n                    </tr>\n                    <tr>\n                        <td>\n                            <input type=\"text\" value={this.state.amount} onChange={this.updateAmount}/>\n                        </td>\n                        <td>\n                            <input type=\"text\" value={this.state.account} onChange={this.updateAccount}/>\n                        </td>\n                        <td>\n                            <input type=\"text\" value={this.state.source} onChange={this.updateSource}/>\n                        </td>\n                        <td>\n                            <input type=\"text\" value={this.state.description} onChange={this.updateDescription}/>\n                        </td>\n                        <td>\n                            <button className={'addButton'} onClick={this.addNewRevenue}>+</button>\n                        </td>\n                    </tr>\n                    </thead>\n                    <tbody>\n                    {revenueRows}\n                    </tbody>\n                </table>\n                <div className=\"add-revenue\">\n\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Revenues;\n","import React from \"react\";\nimport \"./App.css\";\nimport Revenues from \"./components/Revenues\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Revenues/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}